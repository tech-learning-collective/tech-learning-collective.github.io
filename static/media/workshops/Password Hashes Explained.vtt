WEBVTT

1
00:00:03.840 --> 00:00:07.100
When you have a password like for example, you know,

2
00:00:07.100 --> 00:00:09.380
let's just say this is my password, it's not right,

3
00:00:09.380 --> 00:00:15.680
if I was to log in system, then I would need a username and password to login you see this on the Facebook website

4
00:00:15.680 --> 00:00:17.680
and so on.

5
00:00:17.680 --> 00:00:24.000
There's a couple things that happen when you give a remote site your access credentials,

6
00:00:24.000 --> 00:00:28.740
like when you launched you know, GoBrunch, you know, you signed in to GoBrunch to come here,

7
00:00:28.740 --> 00:00:31.540
you know, you made an email address, you made a password you put you put those in,

8
00:00:31.540 --> 00:00:37.740
Hopefully, what GoBrunch is doing—I don't know, I'm not privy to this sort of stuff—

9
00:00:37.740 --> 00:00:45.028
what GoBrunch is doing is hashing it, which is to say that it's taking this content, right password,

10
00:00:45.028 --> 00:00:50.560
right. So there's my, there's my password echoed.

11
00:00:50.560 --> 00:00:55.540
And it's taking that password and putting it through something like a hash function.

12
00:00:55.540 --> 00:01:01.400
Now, hopefully it's using something like bcrypt. I'm going to just demo this with shasum.

13
00:01:01.400 --> 00:01:05.380
And I'll use SHA-1 because it's super fast. And

14
00:01:05.380 --> 00:01:09.860
when I do that, you can see that I get this other piece of text. Right.

15
00:01:09.860 --> 00:01:19.320
So this is the SHA one hash, sometimes called a digest or message digest of the text of the data password.

16
00:01:19.320 --> 00:01:25.040
If I put in something very similar, but not exactly the same, like for example, with a zero,

17
00:01:25.040 --> 00:01:29.520
I'll get a completely different result. And see how these seeds are completely different.

18
00:01:29.520 --> 00:01:33.440
A small change in the input will produce a massive change in the output.

19
00:01:33.440 --> 00:01:40.100
And that's really important because it means that you can't sort of deduce that this is password,

20
00:01:40.100 --> 00:01:45.088
or that this is password with a zero unless you do this process yourself.

21
00:01:45.260 --> 00:01:53.760
So if I, for example, do this a bunch of times, right and I save this output a bunch of times. So let's go ahead and do this and we'll save this to for example.

22
00:01:57.980 --> 00:02:05.380
Yeah, right. So I will put this output and I'll say, you know, these are

23
00:02:05.380 --> 00:02:08.000
hashes, right?

24
00:02:08.000 --> 00:02:16.800
And then we do this, again, oops, I want this to be word, right. And then I do this, again for maybe password one,

25
00:02:16.800 --> 00:02:20.120
and then maybe for password two, and you get the idea, right?

26
00:02:20.120 --> 00:02:25.260
If you look at these files, you know, here are all the hashes that I now have have computed.

27
00:02:25.260 --> 00:02:29.140
Instead of a dash here, it would be the actual text that you put in.

28
00:02:29.140 --> 00:02:33.680
So it's a mapping between the hash and the input that that hash produced.

29
00:02:33.680 --> 00:02:39.700
So hopefully GoBrunch and every other service that you use passwords with, does something like this.

30
00:02:39.700 --> 00:02:48.660
The process is a little bit more involved cryptographically. We can talk a little bit about password based key derivation functions, PBKDFs,

31
00:02:48.660 --> 00:02:52.960
which sort of extend passwords and generate keys based on input and then produce hashes.

32
00:02:52.960 --> 00:03:01.760
Anyway, the point is, conceptually at some point, there's going to be a piece of data stored a secret that's stored on the server you are trying to log into,

33
00:03:01.760 --> 00:03:11.500
and they're going to match that with the input you gave it to see whether or not the password you entered is actually the password that they remember.

34
00:03:11.500 --> 00:03:19.620
But they're going to hopefully keep your password in this form this hashed form rather than just keeping the plaintext.

35
00:03:19.620 --> 00:03:25.120
So one super easy way to find out is if you've ever used the like remind me my password feature

36
00:03:25.120 --> 00:03:29.440
and they have—you ever get like a—you know, sign up for a site or something like you know,

37
00:03:29.440 --> 00:03:35.820
dinky forum or something, make your account, log out and then instead of logging back in

38
00:03:35.820 --> 00:03:38.620
log in using, like, the account recovery feature,

39
00:03:38.620 --> 00:03:43.600
and if they send you back your plain text password, then you know they are not hashing.

