[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 960
PlayResY: 540

[Aegisub Project Garbage]
Audio File: Password Hashes Explained.mp4
Video File: Password Hashes Explained.mp4
Video AR Mode: 4
Video AR Value: 1.777778
Scroll Position: 8
Active Line: 38
Video Position: 6554

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:03.84,0:00:07.10,Default,,0,0,0,,When you have a password like for example, you know,
Dialogue: 0,0:00:07.10,0:00:09.38,Default,,0,0,0,,let's just say this is my password, it's not right,
Dialogue: 0,0:00:09.38,0:00:15.68,Default,,0,0,0,,if I was to log in system, then I would need a username and password to login you see this on the Facebook website
Dialogue: 0,0:00:15.68,0:00:17.68,Default,,0,0,0,,and so on.
Dialogue: 0,0:00:17.68,0:00:24.00,Default,,0,0,0,,There's a couple things that happen when you give a remote site your access credentials,
Dialogue: 0,0:00:24.00,0:00:28.74,Default,,0,0,0,,like when you launched you know, GoBrunch, you know, you signed in to GoBrunch to come here,
Dialogue: 0,0:00:28.74,0:00:31.54,Default,,0,0,0,,you know, you made an email address, you made a password you put you put those in,
Dialogue: 0,0:00:31.54,0:00:37.74,Default,,0,0,0,,Hopefully, what GoBrunch is doing—I don't know, I'm not privy to this sort of stuff—
Dialogue: 0,0:00:37.74,0:00:45.02,Default,,0,0,0,,what GoBrunch is doing is hashing it, which is to say that it's taking this content, right password,
Dialogue: 0,0:00:45.02,0:00:50.56,Default,,0,0,0,,right. So there's my, there's my password echoed.
Dialogue: 0,0:00:50.56,0:00:55.54,Default,,0,0,0,,And it's taking that password and putting it through something like a hash function.
Dialogue: 0,0:00:55.54,0:01:01.40,Default,,0,0,0,,Now, hopefully it's using something like bcrypt. I'm going to just demo this with shasum.
Dialogue: 0,0:01:01.40,0:01:05.38,Default,,0,0,0,,And I'll use SHA-1 because it's super fast. And
Dialogue: 0,0:01:05.38,0:01:09.86,Default,,0,0,0,,when I do that, you can see that I get this other piece of text. Right.
Dialogue: 0,0:01:09.86,0:01:19.32,Default,,0,0,0,,So this is the SHA one hash, sometimes called a digest or message digest of the text of the data password.
Dialogue: 0,0:01:19.32,0:01:25.04,Default,,0,0,0,,If I put in something very similar, but not exactly the same, like for example, with a zero,
Dialogue: 0,0:01:25.04,0:01:29.52,Default,,0,0,0,,I'll get a completely different result. And see how these seeds are completely different.
Dialogue: 0,0:01:29.52,0:01:33.44,Default,,0,0,0,,A small change in the input will produce a massive change in the output.
Dialogue: 0,0:01:33.44,0:01:40.10,Default,,0,0,0,,And that's really important because it means that you can't sort of deduce that this is password,
Dialogue: 0,0:01:40.10,0:01:45.08,Default,,0,0,0,,or that this is password with a zero unless you do this process yourself.
Dialogue: 0,0:01:45.26,0:01:53.76,Default,,0,0,0,,So if I, for example, do this a bunch of times, right and I save this output a bunch of times. So let's go ahead and do this and we'll save this to for example.
Dialogue: 0,0:01:57.98,0:02:05.38,Default,,0,0,0,,Yeah, right. So I will put this output and I'll say, you know, these are
Dialogue: 0,0:02:05.38,0:02:08.00,Default,,0,0,0,,hashes, right?
Dialogue: 0,0:02:08.00,0:02:16.80,Default,,0,0,0,,And then we do this, again, oops, I want this to be word, right. And then I do this, again for maybe password one,
Dialogue: 0,0:02:16.80,0:02:20.12,Default,,0,0,0,,and then maybe for password two, and you get the idea, right?
Dialogue: 0,0:02:20.12,0:02:25.26,Default,,0,0,0,,If you look at these files, you know, here are all the hashes that I now have have computed.
Dialogue: 0,0:02:25.26,0:02:29.14,Default,,0,0,0,,Instead of a dash here, it would be the actual text that you put in.
Dialogue: 0,0:02:29.14,0:02:33.68,Default,,0,0,0,,So it's a mapping between the hash and the input that that hash produced.
Dialogue: 0,0:02:33.68,0:02:39.70,Default,,0,0,0,,So hopefully GoBrunch and every other service that you use passwords with, does something like this.
Dialogue: 0,0:02:39.70,0:02:48.66,Default,,0,0,0,,The process is a little bit more involved cryptographically. We can talk a little bit about password based key derivation functions, PBKDFs,
Dialogue: 0,0:02:48.66,0:02:52.96,Default,,0,0,0,,which sort of extend passwords and generate keys based on input and then produce hashes.
Dialogue: 0,0:02:52.96,0:03:01.76,Default,,0,0,0,,Anyway, the point is, conceptually at some point, there's going to be a piece of data stored a secret that's stored on the server you are trying to log into,
Dialogue: 0,0:03:01.76,0:03:11.50,Default,,0,0,0,,and they're going to match that with the input you gave it to see whether or not the password you entered is actually the password that they remember.
Dialogue: 0,0:03:11.50,0:03:19.62,Default,,0,0,0,,But they're going to hopefully keep your password in this form this hashed form rather than just keeping the plaintext.
Dialogue: 0,0:03:19.62,0:03:25.12,Default,,0,0,0,,So one super easy way to find out is if you've ever used the like remind me my password feature
Dialogue: 0,0:03:25.12,0:03:29.44,Default,,0,0,0,,and they have—you ever get like a—you know, sign up for a site or something like you know,
Dialogue: 0,0:03:29.44,0:03:35.82,Default,,0,0,0,,dinky forum or something, make your account, log out and then instead of logging back in
Dialogue: 0,0:03:35.82,0:03:38.62,Default,,0,0,0,,log in using, like, the account recovery feature,
Dialogue: 0,0:03:38.62,0:03:43.60,Default,,0,0,0,,and if they send you back your plain text password, then you know they are not hashing.
